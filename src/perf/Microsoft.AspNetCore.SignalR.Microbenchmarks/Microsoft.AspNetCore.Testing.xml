<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.Testing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.Testing.CollectDumpAttribute">
            <summary>
            Capture the memory dump upon test failure.
            </summary>
            <remarks>
            This currently only works in Windows environments
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.CultureReplacer.DefaultCultureName">
            <summary>
            The name of the culture that is used as the default value for CultureInfo.DefaultThreadCurrentCulture when CultureReplacer is used.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.CultureReplacer.DefaultUICultureName">
            <summary>
            The name of the culture that is used as the default value for [Thread.CurrentThread(NET45)/CultureInfo(K10)].CurrentUICulture when CultureReplacer is used.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.CultureReplacer.DefaultCulture">
            <summary>
            The culture that is used as the default value for [Thread.CurrentThread(NET45)/CultureInfo(K10)].CurrentCulture when CultureReplacer is used.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.Throws``1(System.Action)">
            <summary>
            Verifies that an exception of the given type (or optionally a derived type) is thrown.
            </summary>
            <typeparam name="TException">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.Throws``1(System.Action,System.String)">
            <summary>
            Verifies that an exception of the given type is thrown.
            Also verifies that the exception message matches.
            </summary>
            <typeparam name="TException">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            Verifies that an exception of the given type is thrown.
            Also verifies that the exception message matches.
            </summary>
            <typeparam name="TException">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.Throws``1(System.Func{System.Object},System.String)">
            <summary>
            Verifies that an exception of the given type is thrown.
            Also verified that the exception message matches.
            </summary>
            <typeparam name="TException">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgument(System.Action,System.String,System.String)">
            <summary>
            Verifies that the code throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String)">
            <summary>
            Verifies that the code throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentNull(System.Action,System.String)">
            <summary>
            Verifies that the code throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentNullOrEmpty(System.Action,System.String)">
            <summary>
            Verifies that the code throws an ArgumentException with the expected message that indicates that the value cannot
            be null or empty.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentNullOrEmptyAsync(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            Verifies that the code throws an ArgumentException with the expected message that indicates that the value cannot
            be null or empty.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentNullOrEmptyString(System.Action,System.String)">
            <summary>
            Verifies that the code throws an ArgumentNullException with the expected message that indicates that the value cannot
            be null or empty string.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentNullOrEmptyStringAsync(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            Verifies that the code throws an ArgumentNullException with the expected message that indicates that the value cannot
            be null or empty string.
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ExceptionAssert.ThrowsArgumentOutOfRange(System.Action,System.String,System.String,System.Object)">
            <summary>
            Verifies that the code throws an ArgumentOutOfRangeException (or optionally any exception which derives from it).
            </summary>
            <param name="testCode">A delegate to the code to be tested</param>
            <param name="paramName">The name of the parameter that should throw the exception</param>
            <param name="exceptionMessage">The exception message to verify</param>
            <param name="actualValue">The actual value provided</param>
            <returns>The exception that was thrown, when successful</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.HttpClientSlim">
            <summary>
            Lightweight version of HttpClient implemented using Socket and SslStream.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.ITestMethodLifecycle">
            <summary>
            Defines a lifecycle for attributes or classes that want to know about tests starting
            or ending. Implement this on a test class, or attribute at the method/class/assembly level.
            </summary>
            <remarks>
            Requires defining <see cref="T:Microsoft.AspNetCore.Testing.AspNetTestFramework"/> as the test framework.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.RepeatAttribute">
            <summary>
            Runs a test multiple times to stress flaky tests that are believed to be fixed.
            This can be used on an assembly, class, or method name. Requires using the AspNetCore test framework.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.RepeatAttribute.RunCount">
            <summary>
            The number of times to run a test.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.ReplaceCultureAttribute">
            <summary>
            Replaces the current culture and UI culture for the test.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ReplaceCultureAttribute.#ctor">
            <summary>
            Replaces the current culture and UI culture to en-GB and en-US respectively.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.ReplaceCultureAttribute.#ctor(System.String,System.String)">
            <summary>
            Replaces the current culture and UI culture based on specified values.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.ReplaceCultureAttribute.Culture">
            <summary>
            The <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> for the test. Defaults to en-GB.
            </summary>
            <remarks>
            en-GB is used here as the default because en-US is equivalent to the InvariantCulture. We
            want to be able to find bugs where we're accidentally relying on the Invariant instead of the
            user's culture.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.ReplaceCultureAttribute.UICulture">
            <summary>
            The <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> for the test. Defaults to en-US.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.RetryAttribute">
            <summary>
            Runs a test multiple times when it fails
            This can be used on an assembly, class, or method name. Requires using the AspNetCore test framework.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.RetryAttribute.MaxRetries">
            <summary>
            The maximum number of times to retry a failed test. Defaults to 3.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.ShortClassNameAttribute">
            <summary>
            Used to specify that <see cref="P:Microsoft.AspNetCore.Testing.TestFileOutputContext.TestClassName"/> should used the
            unqualified class name. This is needed when a fully-qualified class name exceeds
            max path for logging.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.TestContext">
            <summary>
            Provides access to contextual information about the running tests. Get access by
            implementing <see cref="T:Microsoft.AspNetCore.Testing.ITestMethodLifecycle"/>.
            </summary>
            <remarks>
            Requires defining <see cref="T:Microsoft.AspNetCore.Testing.AspNetTestFramework"/> as the test framework.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.TestFileOutputContext">
            <summary>
            Provides access to file storage for the running test. Get access by
            implementing <see cref="T:Microsoft.AspNetCore.Testing.ITestMethodLifecycle"/>, and accessing <see cref="P:Microsoft.AspNetCore.Testing.TestContext.FileOutput"/>.
            </summary>
            <remarks>
            Requires defining <see cref="T:Microsoft.AspNetCore.Testing.AspNetTestFramework"/> as the test framework.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.EnvironmentVariableSkipConditionAttribute">
            <summary>
            Skips a test when the value of an environment variable matches any of the supplied values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.EnvironmentVariableSkipConditionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Testing.EnvironmentVariableSkipConditionAttribute"/>.
            </summary>
            <param name="variableName">Name of the environment variable.</param>
            <param name="values">Value(s) of the environment variable to match for the test to be skipped</param>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.EnvironmentVariableSkipConditionAttribute.RunOnMatch">
            <summary>
            Runs the test only if the value of the variable matches any of the supplied values. Default is <c>True</c>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.MaximumOSVersionAttribute">
            <summary>
            Skips a test if the OS is the given type (Windows) and the OS version is greater than specified.
            E.g. Specifying Window 8 skips on Win 10, but not on Linux. Combine with OSSkipConditionAttribute as needed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.MinimumOSVersionAttribute">
            <summary>
            Skips a test if the OS is the given type (Windows) and the OS version is less than specified.
            E.g. Specifying Window 10.0 skips on Win 8, but not on Linux. Combine with OSSkipConditionAttribute as needed.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.QuarantinedTestAttribute">
             <summary>
             Marks a test as "Quarantined" so that the build will sequester it and ignore failures.
             </summary>
             <remarks>
             <para>
             This attribute works by applying xUnit.net "Traits" based on the criteria specified in the attribute
             properties. Once these traits are applied, build scripts can include/exclude tests based on them.
             </para>
             </remarks>
             <example>
             <code>
             [Fact]
             [QuarantinedTest("Github Url")]
             public void FlakyTest()
             {
                 // Flakiness
             }
             </code>
            
             <para>
             The above example generates the following facet:
             </para>
            
             <list type="bullet">
             <item>
                 <description><c>Quarantined</c> = <c>true</c></description>
             </item>
             </list>
             </example>
        </member>
        <member name="P:Microsoft.AspNetCore.Testing.QuarantinedTestAttribute.Reason">
            <summary>
            Gets an optional reason for the quarantining, such as a link to a GitHub issue URL with more details as to why the test is quarantined.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.QuarantinedTestAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Testing.QuarantinedTestAttribute"/> class with an optional <see cref="P:Microsoft.AspNetCore.Testing.QuarantinedTestAttribute.Reason"/>.
            </summary>
            <param name="reason">A reason that this test is quarantined. Preferably a Github issue Url.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.SkipNonHelixAttribute">
            <summary>
            Skip test if running on CI
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.SkipOnAlpineAttribute">
            <summary>
            Skip test if running on Alpine Linux (which uses musl instead of glibc)
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.SkipOnCIAttribute">
            <summary>
            Skip test if running on CI
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.SkipOnHelixAttribute">
            <summary>
            Skip test if running on helix (or a particular helix queue).
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Testing.WindowsVersions">
            <summary>
            https://en.wikipedia.org/wiki/Windows_10_version_history
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_RS4">
            <summary>
            1803, RS4, 17134
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_RS5">
            <summary>
            1809, RS5, 17763
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_19H1">
            <summary>
            1903, 19H1, 18362
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_19H2">
            <summary>
            1909, 19H2, 18363
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_20H1">
            <summary>
            2004, 20H1, 19041
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win10_20H2">
            <summary>
            20H2, 19042
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win11_21H2">
            <summary>
            21H2, 22000
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Testing.WindowsVersions.Win_Server_2022">
            <summary>
            2022, 20348
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSkippedDataRowTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="skipReason">The reason that this test case will be skipped</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions,Xunit.Abstractions.ITestMethod,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSkippedDataRowTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="defaultMethodDisplayOptions">Default method display options to use (when not customized).</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="skipReason">The reason that this test case will be skipped</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.GetSkipReason(Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Testing.WORKAROUND_SkippedDataRowTestCase.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNetCore.Shared.ArgumentThrowHelper.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null or an <see cref="T:System.ArgumentException"/> if it is empty.</summary>
            <param name="argument">The reference type argument to validate as neither null nor empty.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper.ThrowIfNull(System.Object,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.</summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String,System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Asserts that the given key and value are present in the actual values.
            </summary>
            <param name="key">The key of the item to be found.</param>
            <param name="value">The value of the item to be found.</param>
            <param name="actualValues">The actual values.</param>
        </member>
        <member name="M:Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Asserts that all the expected values are present in the actual values by ignoring
            the order of values.
            </summary>
            <param name="expectedValues">Expected subset of values</param>
            <param name="actualValues">Actual set of values</param>
        </member>
    </members>
</doc>
